// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: parking_permits.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createParkingPermit = `-- name: CreateParkingPermit :one
INSERT INTO parking_permits (
    permit_number,
    created_by,
    updated_at, 
    expires_at
)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, permit_number, created_by, updated_at, expires_at
`

type CreateParkingPermitParams struct {
	PermitNumber int64            `json:"permit_number"`
	CreatedBy    int64            `json:"created_by"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateParkingPermit(ctx context.Context, arg CreateParkingPermitParams) (ParkingPermit, error) {
	row := q.db.QueryRow(ctx, createParkingPermit,
		arg.PermitNumber,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.ExpiresAt,
	)
	var i ParkingPermit
	err := row.Scan(
		&i.ID,
		&i.PermitNumber,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteParkingPermit = `-- name: DeleteParkingPermit :exec
DELETE FROM parking_permits
WHERE id = $1
`

func (q *Queries) DeleteParkingPermit(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteParkingPermit, id)
	return err
}

const getNumOfUserParkingPermits = `-- name: GetNumOfUserParkingPermits :one
SELECT COUNT(*)
FROM parking_permits
WHERE created_by = $1
`

func (q *Queries) GetNumOfUserParkingPermits(ctx context.Context, createdBy int64) (int64, error) {
	row := q.db.QueryRow(ctx, getNumOfUserParkingPermits, createdBy)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getParkingPermit = `-- name: GetParkingPermit :one
SELECT permit_number, created_by, updated_at, expires_at
FROM parking_permits
WHERE permit_number = $1
LIMIT 1
`

type GetParkingPermitRow struct {
	PermitNumber int64            `json:"permit_number"`
	CreatedBy    int64            `json:"created_by"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) GetParkingPermit(ctx context.Context, permitNumber int64) (GetParkingPermitRow, error) {
	row := q.db.QueryRow(ctx, getParkingPermit, permitNumber)
	var i GetParkingPermitRow
	err := row.Scan(
		&i.PermitNumber,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getParkingPermits = `-- name: GetParkingPermits :many
SELECT id, permit_number, created_by, updated_at, expires_at
FROM parking_permits
ORDER BY created_by DESC
LIMIT $1 OFFSET $2
`

type GetParkingPermitsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetParkingPermits(ctx context.Context, arg GetParkingPermitsParams) ([]ParkingPermit, error) {
	rows, err := q.db.Query(ctx, getParkingPermits, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParkingPermit
	for rows.Next() {
		var i ParkingPermit
		if err := rows.Scan(
			&i.ID,
			&i.PermitNumber,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
