// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: buildings.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBuilding = `-- name: CreateBuilding :one
INSERT INTO buildings (
    building_number,
    apartments,
    parking_total,
    per_user_parking,
    management_id,
    created_at,
    updated_at
  ) VALUES ($1, $2, $3, $4, $5, now(), now())
RETURNING id, building_number, parking_total, per_user_parking, management_id, apartments, created_at, updated_at
`

type CreateBuildingParams struct {
	BuildingNumber int64       `json:"building_number"`
	Apartments     int64       `json:"apartments"`
	ParkingTotal   pgtype.Int8 `json:"parking_total"`
	PerUserParking pgtype.Int8 `json:"per_user_parking"`
	ManagementID   int64       `json:"management_id"`
}

func (q *Queries) CreateBuilding(ctx context.Context, arg CreateBuildingParams) (Building, error) {
	row := q.db.QueryRow(ctx, createBuilding,
		arg.BuildingNumber,
		arg.Apartments,
		arg.ParkingTotal,
		arg.PerUserParking,
		arg.ManagementID,
	)
	var i Building
	err := row.Scan(
		&i.ID,
		&i.BuildingNumber,
		&i.ParkingTotal,
		&i.PerUserParking,
		&i.ManagementID,
		&i.Apartments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBuilding = `-- name: GetBuilding :one
SELECT id, building_number, parking_total, per_user_parking, management_id, apartments, created_at, updated_at
FROM buildings
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBuilding(ctx context.Context, id int64) (Building, error) {
	row := q.db.QueryRow(ctx, getBuilding, id)
	var i Building
	err := row.Scan(
		&i.ID,
		&i.BuildingNumber,
		&i.ParkingTotal,
		&i.PerUserParking,
		&i.ManagementID,
		&i.Apartments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
