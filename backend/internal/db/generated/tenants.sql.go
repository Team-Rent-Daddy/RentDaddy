// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tenants.sql

package generated

import (
	"context"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (
    name, 
    email
) VALUES (
    $1, $2
) RETURNING id, name, email, created_at
`

type CreateTenantParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, createTenant, arg.Name, arg.Email)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM tenants
WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTenant, id)
	return err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT id, name, email, created_at
FROM tenants
WHERE id = $1
`

func (q *Queries) GetTenantByID(ctx context.Context, id int32) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenantByID, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getTenants = `-- name: GetTenants :many
SELECT id, name, email, created_at
FROM tenants
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetTenantsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTenants(ctx context.Context, arg GetTenantsParams) ([]Tenant, error) {
	rows, err := q.db.Query(ctx, getTenants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tenant
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
