// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: leases.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLease = `-- name: CreateLease :one
INSERT INTO leases (
    lease_number, external_doc_id, tenant_id, landlord_id, apartment_id, 
    lease_start_date, lease_end_date, rent_amount, status
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type CreateLeaseParams struct {
	LeaseNumber    int64          `json:"lease_number"`
	ExternalDocID  string         `json:"external_doc_id"`
	TenantID       int64          `json:"tenant_id"`
	LandlordID     int64          `json:"landlord_id"`
	ApartmentID    int64          `json:"apartment_id"`
	LeaseStartDate pgtype.Date    `json:"lease_start_date"`
	LeaseEndDate   pgtype.Date    `json:"lease_end_date"`
	RentAmount     pgtype.Numeric `json:"rent_amount"`
	Status         LeaseStatus    `json:"status"`
}

func (q *Queries) CreateLease(ctx context.Context, arg CreateLeaseParams) (int64, error) {
	row := q.db.QueryRow(ctx, createLease,
		arg.LeaseNumber,
		arg.ExternalDocID,
		arg.TenantID,
		arg.LandlordID,
		arg.ApartmentID,
		arg.LeaseStartDate,
		arg.LeaseEndDate,
		arg.RentAmount,
		arg.Status,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getLeaseByID = `-- name: GetLeaseByID :one
SELECT id, lease_number, external_doc_id, lease_pdf_s3, tenant_id, landlord_id, apartment_id, lease_start_date, lease_end_date, rent_amount, status, created_by, updated_by, created_at, updated_at, previous_lease_id, tenant_signing_url FROM leases WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLeaseByID(ctx context.Context, id int64) (Lease, error) {
	row := q.db.QueryRow(ctx, getLeaseByID, id)
	var i Lease
	err := row.Scan(
		&i.ID,
		&i.LeaseNumber,
		&i.ExternalDocID,
		&i.LeasePdfS3,
		&i.TenantID,
		&i.LandlordID,
		&i.ApartmentID,
		&i.LeaseStartDate,
		&i.LeaseEndDate,
		&i.RentAmount,
		&i.Status,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PreviousLeaseID,
		&i.TenantSigningUrl,
	)
	return i, err
}

const getLeaseByNumber = `-- name: GetLeaseByNumber :one
SELECT id, lease_number, external_doc_id, lease_pdf_s3, tenant_id, landlord_id, apartment_id, lease_start_date, lease_end_date, rent_amount, status, created_by, updated_by, created_at, updated_at, previous_lease_id, tenant_signing_url FROM leases WHERE lease_number = $1 LIMIT 1
`

func (q *Queries) GetLeaseByNumber(ctx context.Context, leaseNumber int64) (Lease, error) {
	row := q.db.QueryRow(ctx, getLeaseByNumber, leaseNumber)
	var i Lease
	err := row.Scan(
		&i.ID,
		&i.LeaseNumber,
		&i.ExternalDocID,
		&i.LeasePdfS3,
		&i.TenantID,
		&i.LandlordID,
		&i.ApartmentID,
		&i.LeaseStartDate,
		&i.LeaseEndDate,
		&i.RentAmount,
		&i.Status,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PreviousLeaseID,
		&i.TenantSigningUrl,
	)
	return i, err
}

const listLeases = `-- name: ListLeases :many
SELECT id, lease_number, external_doc_id, lease_pdf_s3, tenant_id, landlord_id, apartment_id, lease_start_date, lease_end_date, rent_amount, status, created_by, updated_by, created_at, updated_at, previous_lease_id, tenant_signing_url FROM leases ORDER BY created_at DESC
`

func (q *Queries) ListLeases(ctx context.Context) ([]Lease, error) {
	rows, err := q.db.Query(ctx, listLeases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lease
	for rows.Next() {
		var i Lease
		if err := rows.Scan(
			&i.ID,
			&i.LeaseNumber,
			&i.ExternalDocID,
			&i.LeasePdfS3,
			&i.TenantID,
			&i.LandlordID,
			&i.ApartmentID,
			&i.LeaseStartDate,
			&i.LeaseEndDate,
			&i.RentAmount,
			&i.Status,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PreviousLeaseID,
			&i.TenantSigningUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renewLease = `-- name: RenewLease :exec
UPDATE leases
SET 
    lease_end_date = $1, 
    updated_by = $2, 
    updated_at = now()
WHERE id = $3 AND status = 'active'
RETURNING id, lease_number, external_doc_id, tenant_id, landlord_id, apartment_id, 
    lease_start_date, lease_end_date, rent_amount, status, 
    updated_by, updated_at
`

type RenewLeaseParams struct {
	LeaseEndDate pgtype.Date `json:"lease_end_date"`
	UpdatedBy    int64       `json:"updated_by"`
	ID           int64       `json:"id"`
}

func (q *Queries) RenewLease(ctx context.Context, arg RenewLeaseParams) error {
	_, err := q.db.Exec(ctx, renewLease, arg.LeaseEndDate, arg.UpdatedBy, arg.ID)
	return err
}

const terminateLease = `-- name: TerminateLease :exec
UPDATE leases
SET 
    status = 'terminated', 
    updated_by = $1, 
    updated_at = now()
WHERE id = $2
RETURNING id, lease_number, external_doc_id, tenant_id, landlord_id, apartment_id, 
    lease_start_date, lease_end_date, rent_amount, status, 
     updated_by, updated_at
`

type TerminateLeaseParams struct {
	UpdatedBy int64 `json:"updated_by"`
	ID        int64 `json:"id"`
}

func (q *Queries) TerminateLease(ctx context.Context, arg TerminateLeaseParams) error {
	_, err := q.db.Exec(ctx, terminateLease, arg.UpdatedBy, arg.ID)
	return err
}

const updateLease = `-- name: UpdateLease :exec
UPDATE leases
SET 
    tenant_id = $1,
    status = $2,
    lease_start_date = $3,
    lease_end_date = $4,
    updated_by = $5,
    updated_at = now()
WHERE id = $6
RETURNING id, lease_number, external_doc_id, tenant_id, landlord_id, apartment_id, 
    lease_start_date, lease_end_date, rent_amount, status, 
    updated_by, updated_at
`

type UpdateLeaseParams struct {
	TenantID       int64       `json:"tenant_id"`
	Status         LeaseStatus `json:"status"`
	LeaseStartDate pgtype.Date `json:"lease_start_date"`
	LeaseEndDate   pgtype.Date `json:"lease_end_date"`
	UpdatedBy      int64       `json:"updated_by"`
	ID             int64       `json:"id"`
}

func (q *Queries) UpdateLease(ctx context.Context, arg UpdateLeaseParams) error {
	_, err := q.db.Exec(ctx, updateLease,
		arg.TenantID,
		arg.Status,
		arg.LeaseStartDate,
		arg.LeaseEndDate,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
