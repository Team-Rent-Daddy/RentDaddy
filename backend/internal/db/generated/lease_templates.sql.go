// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: lease_templates.sql

package db

import (
	"context"
)

const getLeaseTemplateByID = `-- name: GetLeaseTemplateByID :one
SELECT lease_template_pdf FROM lease_templates WHERE id = $1
`

func (q *Queries) GetLeaseTemplateByID(ctx context.Context, id int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, getLeaseTemplateByID, id)
	var lease_template_pdf []byte
	err := row.Scan(&lease_template_pdf)
	return lease_template_pdf, err
}

const getLeaseTemplates = `-- name: GetLeaseTemplates :many
SELECT id, lease_template_pdf FROM lease_templates
`

func (q *Queries) GetLeaseTemplates(ctx context.Context) ([]LeaseTemplate, error) {
	rows, err := q.db.Query(ctx, getLeaseTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LeaseTemplate
	for rows.Next() {
		var i LeaseTemplate
		if err := rows.Scan(&i.ID, &i.LeaseTemplatePdf); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
