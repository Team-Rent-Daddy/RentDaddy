// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package generated

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createTenantStmt, err = db.PrepareContext(ctx, createTenant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTenant: %w", err)
	}
	if q.deleteTenantStmt, err = db.PrepareContext(ctx, deleteTenant); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTenant: %w", err)
	}
	if q.getTenantByIDStmt, err = db.PrepareContext(ctx, getTenantByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTenantByID: %w", err)
	}
	if q.getTenantsStmt, err = db.PrepareContext(ctx, getTenants); err != nil {
		return nil, fmt.Errorf("error preparing query GetTenants: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createTenantStmt != nil {
		if cerr := q.createTenantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTenantStmt: %w", cerr)
		}
	}
	if q.deleteTenantStmt != nil {
		if cerr := q.deleteTenantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTenantStmt: %w", cerr)
		}
	}
	if q.getTenantByIDStmt != nil {
		if cerr := q.getTenantByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTenantByIDStmt: %w", cerr)
		}
	}
	if q.getTenantsStmt != nil {
		if cerr := q.getTenantsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTenantsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                DBTX
	tx                *sql.Tx
	createTenantStmt  *sql.Stmt
	deleteTenantStmt  *sql.Stmt
	getTenantByIDStmt *sql.Stmt
	getTenantsStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                tx,
		tx:                tx,
		createTenantStmt:  q.createTenantStmt,
		deleteTenantStmt:  q.deleteTenantStmt,
		getTenantByIDStmt: q.getTenantByIDStmt,
		getTenantsStmt:    q.getTenantsStmt,
	}
}
