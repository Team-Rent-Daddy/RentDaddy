version: "3"

dotenv: ["../.env"]

vars:
  MPATH: "internal/db/migrations/"
  # PG_URL: postgresql://{{.POSTGRES_USER}}:{{.POSTGRES_PASSWORD}}@postgres:{{.POSTGRES_PORT}}/{{.POSTGRES_DB}}?sslmode=disable
  PG_URL: postgresql://{{.POSTGRES_USER}}@postgres:{{.POSTGRES_PORT}}/{{.POSTGRES_DB}}?sslmode=disable

tasks:
  build:
    cmds:
      - go build -v -i server.go

  run:
    desc: "Run Go app with Air reloading"
    cmds:
      - air -c .air.toml

  make-migration:
    desc: "Create a new migration set with a user provided name. ie: task make-migration -- <name-input>"
    cmds:
      - migrate create -ext sql -dir internal/db/migrations -seq {{.CLI_ARGS}}
      - echo 'New migration generated! Make sure to verify new files in internal/db/migrations'

  migrate:up:
    desc: "Apply migrations to the database"
    cmds:
      # The commented block prints credentials to the logs/command-line
      # - |
      #   PGPASSWORD="{{.POSTGRES_PASSWORD}}" psql -h postgres -U {{.POSTGRES_USER}} -d {{.POSTGRES_DB}} -c "SELECT 'Hidden'" > /dev/null 2>&1 "
      #   WITH settings AS (
      #   SELECT '{{.POSTGRES_USER}}' AS current_user,
      #      '{{.POSTGRES_PASSWORD}}' AS current_password,
      #      '{{.POSTGRES_DB}}' AS current_db) SELECT * FROM settings;" > /dev/null 2>&1
      - psql -h postgres -U {{.POSTGRES_USER}} -d {{.POSTGRES_DB}} -c "SELECT 'Hidden'"
      - migrate -path {{.MPATH}} -database "{{.PG_URL}}" -verbose up # > /dev/null 2>&1
      - echo "Migrations applied!"

  migrate:down:
    cmds:
      - migrate -path {{.MPATH}} -database "{{.PG_URL}}" -verbose down 1
      - echo "Migrating down 1 version.."

  migrate:version:
    cmds:
      - migrate -path {{.MPATH}} -database "{{.PG_URL}}" -verbose version

  migrate:status:
    desc: "Check migration version and if database is dirty"
    cmds:
      - migrate -path {{.MPATH}} -database "{{.PG_URL}}" -verbose version

  migrate:fix-dirty:
    desc: "Fix a dirty database state by forcing last successful version"
    cmds:
      - echo "Checking migration status..."
      - migrate -path {{.MPATH}} -database "{{.PG_URL}}" force 1
      - echo "Database migration state reset!"

  migrate:reset:
    desc: "Reset database (wipe all data and re-run migrations)"
    cmds:
      - migrate -path {{.MPATH}} -database "{{.PG_URL}}" -verbose down
      - migrate -path {{.MPATH}} -database "{{.PG_URL}}" -verbose up
  test:all:
    desc: "Test all in backend in container"
    cmds:
      - chmod +x ./scripts/test-all.sh
      - ./scripts/test-all.sh
  test:changed:
    desc: "Test changed files only in backend in container"
    cmds:
      - chmod +x ./scripts/test-changed.sh
      - ./scripts/test-changed.sh
  db:connect:
    desc: "Test changed files only in backend in container"
    cmds:
      # Check if container is running
      - |
        CONTAINER_NAME="rentdaddy-backend"
          if ! docker ps | grep -q "$CONTAINER_NAME"; then 
          echo "Error: Container $CONTAINER_NAME is not running!"
        exit 1
        fi
        echo "Running all tests in container: $CONTAINER_NAME..."
        psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DB
