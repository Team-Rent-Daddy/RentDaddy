// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/db/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	generated "github.com/careecodes/RentDaddy/internal/db/generated"
	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateLease mocks base method.
func (m *MockQuerier) CreateLease(ctx context.Context, arg generated.CreateLeaseParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLease", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLease indicates an expected call of CreateLease.
func (mr *MockQuerierMockRecorder) CreateLease(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLease", reflect.TypeOf((*MockQuerier)(nil).CreateLease), ctx, arg)
}

// GetLeaseByID mocks base method.
func (m *MockQuerier) GetLeaseByID(ctx context.Context, id int64) (generated.GetLeaseByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaseByID", ctx, id)
	ret0, _ := ret[0].(generated.GetLeaseByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaseByID indicates an expected call of GetLeaseByID.
func (mr *MockQuerierMockRecorder) GetLeaseByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaseByID", reflect.TypeOf((*MockQuerier)(nil).GetLeaseByID), ctx, id)
}

// GetLeaseTemplateByID mocks base method.
func (m *MockQuerier) GetLeaseTemplateByID(ctx context.Context, id int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaseTemplateByID", ctx, id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaseTemplateByID indicates an expected call of GetLeaseTemplateByID.
func (mr *MockQuerierMockRecorder) GetLeaseTemplateByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaseTemplateByID", reflect.TypeOf((*MockQuerier)(nil).GetLeaseTemplateByID), ctx, id)
}

// ListLeases mocks base method.
func (m *MockQuerier) ListLeases(ctx context.Context) ([]generated.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLeases", ctx)
	ret0, _ := ret[0].([]generated.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLeases indicates an expected call of ListLeases.
func (mr *MockQuerierMockRecorder) ListLeases(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLeases", reflect.TypeOf((*MockQuerier)(nil).ListLeases), ctx)
}
